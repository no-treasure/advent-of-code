import { assertEquals } from "jsr:@std/assert";
import { partOne } from "./part-one.ts";

Deno.test({
  name: "partOne should return 36",
  fn: () => {
    assertEquals(
      partOne([
        ["8", "9", "0", "1", "0", "1", "2", "3"],
        ["7", "8", "1", "2", "1", "8", "7", "4"],
        ["8", "7", "4", "3", "0", "9", "6", "5"],
        ["9", "6", "5", "4", "9", "8", "7", "4"],
        ["4", "5", "6", "7", "8", "9", "0", "3"],
        ["3", "2", "0", "1", "9", "0", "1", "2"],
        ["0", "1", "3", "2", "9", "8", "0", "1"],
        ["1", "0", "4", "5", "6", "7", "3", "2"],
      ]),
      36,
    );
  },
});

Deno.test({
  name: "partOne should return 3",
  fn: () => {
    assertEquals(
      partOne([
        ["1", "0", ".", ".", "9", ".", "."],
        ["2", ".", ".", ".", "8", ".", "."],
        ["3", ".", ".", ".", "7", ".", "."],
        ["4", "5", "6", "7", "6", "5", "4"],
        [".", ".", ".", "8", ".", ".", "3"],
        [".", ".", ".", "9", ".", ".", "2"],
        [".", ".", ".", ".", ".", "0", "1"],
      ]),
      3,
    );
  },
});

Deno.test({
  name: "partOne should return 2",
  fn: () => {
    assertEquals(
      partOne([
        [".", ".", ".", "0", ".", ".", "."],
        [".", ".", ".", "1", ".", ".", "."],
        [".", ".", ".", "2", ".", ".", "."],
        ["6", "5", "4", "3", "4", "5", "6"],
        ["7", ".", ".", ".", ".", ".", "7"],
        ["8", ".", ".", ".", ".", ".", "8"],
        ["9", ".", ".", ".", ".", ".", "9"],
      ]),
      2,
    );
  },
});

Deno.test({
  name: "partOne should return 4",
  fn: () => {
    assertEquals(
      partOne([
        [".", ".", "9", "0", ".", ".", "9"],
        [".", ".", ".", "1", ".", "9", "8"],
        [".", ".", ".", "2", ".", ".", "7"],
        ["6", "5", "4", "3", "4", "5", "6"],
        ["7", "6", "5", ".", "9", "8", "7"],
        ["8", "7", "6", ".", ".", ".", "."],
        ["9", "8", "7", ".", ".", ".", "."],
      ]),
      4,
    );
  },
});
